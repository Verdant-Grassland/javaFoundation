import{_ as s,r as e,o as p,c as t,b as c,d as i,e as l,a}from"./app-9add14af.js";const o={},d=a(`<h1 id="第十一章" tabindex="-1"><a class="header-anchor" href="#第十一章" aria-hidden="true">#</a> 第十一章</h1><p>1.类和对象的关系？</p><p>类是对象的抽象，对象是类的实例</p><p>2.什么是对象？</p><p>万物皆对象</p><p>3.什么是类？</p><p>类是具有相同属性和行为的对象的集合。类是对象的模板。</p><p>4.属性和方法概念?</p><p>属性：对象具有的各种特征</p><p>方法：对象执行的操作</p><p>5.定义类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> 类名｛
	<span class="token comment">//定义属性</span>
	<span class="token comment">//定义方法</span>
｝
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6.创建类的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>类名  对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>7.调用属性和方法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>对象名<span class="token punctuation">.</span>属性名<span class="token operator">=</span>赋值<span class="token punctuation">;</span>
对象名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>8.定义方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> 方法返回值类型  方法名称<span class="token punctuation">(</span>参数列数<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法返回值类型可以是任意类型的。比如说：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token class-name">String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>没有返回值类型的方法，我们使用void来声明 例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有返回值方法的调用通过：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>对象名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//直接调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>没有返回值方法的调用通过：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>对象名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//直接调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>9.方法返回值两种情况: 1）.如果方法具有返回值，方法中必须使用关键字return返回该值，返回值类型为该返回值的类型 return 表达式;</p><p>2）.如果方法没有返回值，返回值类型为void</p>`,29),u=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">1</span>）类型 变量名<span class="token operator">=</span>对象名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：变量的类型一定要与方法的返回类型一样</p><p>2）.在输出的代码中调用带返回值类型的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>对象名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>11.对于没有返回值类型(void)的方法，需要直接调用.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>如：对象名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>没有返回值类型的方法，不能在输出代码中调用</p><p>12.注意事项： 方法中可以调用方法，但是一个方法定义中，不能在包括另外一个方法定义. 方法的返回类型只能有一个，方法的返回值也只能有一个</p><p>13.形象和实参的概念：</p><p><strong>形参</strong> ：定义方法时方法括号里所声明的参数叫做形参</p><p><strong>实参</strong> ：调用方法时，实际传的值叫做实参</p>`,11);function r(v,k){const n=e("Badge");return p(),t("div",null,[d,c("p",null,[i("10.调用带返回值方法的方式："),l(n,{type:"danger",text:"重点"})]),u])}const g=s(o,[["render",r],["__file","java11.html.vue"]]);export{g as default};
